#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî• SOLUTION D√âFINITIVE: BFG REPO-CLEANER
Supprime d√©finitivement les gros fichiers de TOUT l'historique Git
"""

import subprocess
import sys
import os
import requests
from pathlib import Path

def download_bfg():
    """T√©l√©charge BFG Repo-Cleaner"""
    print("üì• T√©l√©chargement de BFG Repo-Cleaner...")
    
    bfg_url = "https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar"
    bfg_path = Path("bfg.jar")
    
    if bfg_path.exists():
        print("‚úÖ BFG d√©j√† t√©l√©charg√©")
        return str(bfg_path)
    
    try:
        response = requests.get(bfg_url, stream=True)
        response.raise_for_status()
        
        with open(bfg_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print(f"‚úÖ BFG t√©l√©charg√©: {bfg_path}")
        return str(bfg_path)
    
    except Exception as e:
        print(f"‚ùå Erreur t√©l√©chargement BFG: {e}")
        return None

def run_command(command, capture_output=True):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        print(f"‚öôÔ∏è Ex√©cution: {command}")
        result = subprocess.run(command, shell=True, capture_output=capture_output, text=True)
        if result.returncode == 0:
            print("   ‚úÖ Succ√®s")
        else:
            print(f"   ‚ö†Ô∏è Code retour: {result.returncode}")
            if result.stderr:
                print(f"   Erreur: {result.stderr}")
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        print(f"   ‚ùå Exception: {e}")
        return False, "", str(e)

def clean_with_bfg():
    """Utilise BFG pour nettoyer l'historique"""
    print("üî• NETTOYAGE AVEC BFG REPO-CLEANER")
    print("=" * 50)
    
    # T√©l√©charger BFG
    bfg_path = download_bfg()
    if not bfg_path:
        print("‚ùå Impossible de t√©l√©charger BFG")
        return False
    
    # V√©rifier Java
    success, _, _ = run_command("java -version")
    if not success:
        print("‚ùå Java requis pour BFG. Installez Java d'abord.")
        return False
    
    print("\nüßπ Nettoyage de l'historique...")
    
    # Sauvegarde
    print("üíæ Cr√©ation d'une sauvegarde...")
    run_command("git branch backup-avant-bfg")
    
    # Nettoyer les gros fichiers avec BFG
    commands = [
        f"java -jar {bfg_path} --delete-files '*.zip' .",
        f"java -jar {bfg_path} --delete-files '*.csv' .",
        f"java -jar {bfg_path} --delete-files '*.safetensors' .",
        f"java -jar {bfg_path} --delete-files '*.bin' .",
        f"java -jar {bfg_path} --delete-folders 'data' .",
        f"java -jar {bfg_path} --delete-folders 'colab_package' .",
        f"java -jar {bfg_path} --strip-blobs-bigger-than 50M ."
    ]
    
    for cmd in commands:
        success, stdout, stderr = run_command(cmd)
        if success:
            print(f"   ‚úÖ Nettoyage r√©ussi")
        else:
            print(f"   ‚ö†Ô∏è Avertissement: {stderr}")
    
    # Finaliser le nettoyage
    print("\nüîß Finalisation...")
    cleanup_commands = [
        "git reflog expire --expire=now --all",
        "git gc --prune=now --aggressive"
    ]
    
    for cmd in cleanup_commands:
        run_command(cmd, capture_output=False)
    
    print("\n‚úÖ Nettoyage BFG termin√©!")
    return True

def manual_solution():
    """Solution manuelle sans BFG"""
    print("üõ†Ô∏è SOLUTION MANUELLE ALTERNATIVE")
    print("=" * 50)
    
    print("Si BFG ne fonctionne pas, voici la solution manuelle:")
    print()
    print("1Ô∏è‚É£ CR√âER UN NOUVEAU D√âP√îT PROPRE")
    print("   git checkout --orphan nouvelle-branche")
    print("   git rm -rf .")
    print()
    print("2Ô∏è‚É£ COPIER SEULEMENT LES FICHIERS ESSENTIELS")
    essential_files = [
        "app.py", "start.py", "config.py", ".gitignore",
        "static/", "templates/", "utils/", "tests/", "docs/", "scripts/",
        "README*.md", "requirements.txt"
    ]
    print("   Fichiers √† conserver:")
    for f in essential_files:
        print(f"   ‚Ä¢ {f}")
    
    print()
    print("3Ô∏è‚É£ NOUVEAU COMMIT PROPRE")
    print("   git add .")
    print("   git commit -m 'Clean start: Remove all large files'")
    print("   git branch -D main")
    print("   git branch -m main")
    print("   git push origin main --force")

def quick_fix():
    """Solution rapide : nouveau d√©p√¥t"""
    print("‚ö° SOLUTION RAPIDE: NOUVEAU D√âP√îT")
    print("=" * 50)
    
    print("La solution la plus simple :")
    print()
    print("1. Cr√©er un NOUVEAU d√©p√¥t sur GitHub (ex: NLP-Sentiment-Analysis-Clean)")
    print("2. Changer l'origine :")
    print("   git remote set-url origin https://github.com/USERNAME/NLP-Sentiment-Analysis-Clean.git")
    print("3. Push vers le nouveau d√©p√¥t :")
    print("   git push origin main")
    print()
    print("‚úÖ Avantages: Simple, rapide, pas de risque")
    print("‚ùå Inconv√©nient: Perd l'historique des commits")

def main():
    """Menu principal"""
    print("üî• SOLUTION D√âFINITIVE POUR LES GROS FICHIERS")
    print("=" * 60)
    print("GitHub refuse encore le push √† cause des gros fichiers dans l'historique.")
    print()
    print("Choisissez une solution :")
    print("1. üî• BFG Repo-Cleaner (Recommand√©)")
    print("2. üõ†Ô∏è Solution manuelle")
    print("3. ‚ö° Nouveau d√©p√¥t (Simple)")
    print("4. ‚ùå Annuler")
    print()
    
    choice = input("Votre choix (1-4): ").strip()
    
    if choice == "1":
        if clean_with_bfg():
            print("\nüöÄ PROCHAINE √âTAPE:")
            print("   git push origin main --force")
        else:
            print("\n‚ùå BFG a √©chou√©. Essayez l'option 2 ou 3.")
    
    elif choice == "2":
        manual_solution()
    
    elif choice == "3":
        quick_fix()
    
    elif choice == "4":
        print("‚ùå Op√©ration annul√©e")
    
    else:
        print("‚ùå Choix invalide")

if __name__ == "__main__":
    main()
